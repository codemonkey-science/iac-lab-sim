---
- name: Ensure .env file exists
  file:
    path: /opt/graylog/.env
    state: touch
    owner: graylog
    group: graylog
    mode: '0644'

- name: Copy docker-compose.yml to remote host
  copy:
    src: ./files/docker-compose.yml
    dest: /opt/graylog/docker-compose.yml
    owner: graylog
    group: graylog
    mode: '0644'

- name: Check if GRAYLOG_PASSWORD_SECRET exists
  shell: grep -q 'GRAYLOG_PASSWORD_SECRET' /opt/graylog/.env
  register: graylog_password_secret_exists
  ignore_errors: true

- name: Generate GRAYLOG_PASSWORD_SECRET
  shell:
    cmd: openssl rand -base64 36
  register: graylog_password_secret
  when: graylog_password_secret_exists.rc != 0

- name: Store GRAYLOG_PASSWORD_SECRET in .env
  shell:
    cmd: echo "GRAYLOG_PASSWORD_SECRET={{ graylog_password_secret.stdout }}" >> /opt/graylog/.env
  when: graylog_password_secret_exists.rc != 0

- name: Check if GRAYLOG_ROOT_PASSWORD_SHA2 exists
  shell: grep -q 'GRAYLOG_ROOT_PASSWORD_SHA2' /opt/graylog/.env
  register: graylog_root_password_sha2_exists
  ignore_errors: true

- name: Generate GRAYLOG_ROOT_PASSWORD_SHA2
  shell:
    cmd: echo -n "{{ graylog_password_secret.stdout }}" | sha256sum | awk '{print $1}'
  register: graylog_root_password_sha2
  when: graylog_root_password_sha2_exists.rc != 0

- name: Store GRAYLOG_ROOT_PASSWORD_SHA2 in .env
  shell:
    cmd: echo "GRAYLOG_ROOT_PASSWORD_SHA2={{ graylog_root_password_sha2.stdout }}" >> /opt/graylog/.env
  when: graylog_root_password_sha2_exists.rc != 0


- name: Check if GRAYLOG_TRANSPORT_EMAIL_HOSTNAME exists
  shell: grep -q 'GRAYLOG_TRANSPORT_EMAIL_HOSTNAME' /opt/graylog/.env
  register: graylog_transport_email_hostname_exists
  ignore_errors: true

- name: Generate GRAYLOG_TRANSPORT_EMAIL_HOSTNAME
  shell:
    cmd: echo "GRAYLOG_TRANSPORT_EMAIL_HOSTNAME=tbd-mail.example.com" >> /opt/graylog/.env
  when: graylog_transport_email_hostname_exists.rc != 0

- name: Check if GRAYLOG_TRANSPORT_EMAIL_AUTH_USERNAME exists
  shell: grep -q 'GRAYLOG_TRANSPORT_EMAIL_AUTH_USERNAME' /opt/graylog/.env
  register: graylog_transport_email_auth_username_exists
  ignore_errors: true

- name: Generate GRAYLOG_TRANSPORT_EMAIL_AUTH_USERNAME
  shell:
    cmd: echo "GRAYLOG_TRANSPORT_EMAIL_AUTH_USERNAME=suport@codemonkey.science" >> /opt/graylog/.env
  when: graylog_transport_email_auth_username_exists.rc != 0

- name: Check if GRAYLOG_TRANSPORT_EMAIL_AUTH_PASSWORD exists
  shell: grep -q 'GRAYLOG_TRANSPORT_EMAIL_AUTH_PASSWORD' /opt/graylog/.env
  register: graylog_transport_email_auth_password_exists
  ignore_errors: true

- name: Generate GRAYLOG_TRANSPORT_EMAIL_AUTH_PASSWORD
  shell:
    cmd: echo "GRAYLOG_TRANSPORT_EMAIL_AUTH_PASSWORD={{ lookup('env', 'SMTP_PASSWORD') }}" >> /opt/graylog/.env
  when: graylog_transport_email_auth_password_exists.rc != 0

- name: Check if GF_SECURITY_ADMIN_USER exists
  shell: grep -q 'GF_SECURITY_ADMIN_USER' /opt/graylog/.env
  register: gf_security_admin_user_exists
  ignore_errors: true

- name: Generate GF_SECURITY_ADMIN_USER
  shell:
    cmd: echo "GF_SECURITY_ADMIN_USER=admin" >> /opt/graylog/.env
  when: gf_security_admin_user_exists.rc != 0

- name: Check if GF_SECURITY_ADMIN_PASSWORD exists
  shell: grep -q 'GF_SECURITY_ADMIN_PASSWORD' /opt/graylog/.env
  register: gf_security_admin_password_exists
  ignore_errors: true

- name: Generate GF_SECURITY_ADMIN_PASSWORD
  shell:
    cmd: echo "GF_SECURITY_ADMIN_PASSWORD=$(openssl rand -base64 36)" >> /opt/graylog/.env
  when: gf_security_admin_password_exists.rc != 0



- name: Check if CF_API_EMAIL exists
  shell: grep -q 'CF_API_EMAIL' /opt/graylog/.env
  register: cf_api_email_exists
  ignore_errors: true

- name: Inject CF_API_EMAIL secret
  shell:
    cmd: echo "CF_API_EMAIL={{ lookup('env', 'CF_API_EMAIL') }}" >> /opt/graylog/.env
  when: cf_api_email_exists.rc != 0

- name: Check if CF_API_KEY exists
  shell: grep -q 'CF_API_KEY' /opt/graylog/.env
  register: cf_api_key_exists
  ignore_errors: true

- name: Inject CF_API_KEY secret
  shell:
    cmd: echo "CF_API_KEY={{ lookup('env', 'CF_API_KEY') }}" >> /opt/graylog/.env
  when: cf_api_key_exists.rc != 0

- name: Install pip3
  apt:
    name: python3-pip
    state: present

- name: Install Docker SDK for Python (required for docker_network module)
  ansible.builtin.pip:
    name: docker
    state: present

- name: Create traefik_proxy network
  docker_network:
    name: traefik_proxy
    state: present