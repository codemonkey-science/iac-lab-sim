---
version: "3.4"

services:

  traefik:
    image: traefik:v2.5
    container_name: traefik
    command:
      - "--log.level=INFO"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--certificatesresolvers.myresolver.acme.email=${CF_API_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.provider=cloudflare"
      - "--api.insecure=true"
      - "--api.dashboard=true"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    environment:
      CF_API_EMAIL: ${CF_API_EMAIL}
      CF_API_KEY: ${CF_API_KEY}
    healthcheck:
      test: ["CMD-SHELL", "wget --spider --quiet --tries=1 --timeout=8 http://localhost:8080/api/rawdata || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - traefik_proxy
    env_file:
      - .env
    depends_on:
      - graylog

  heimdall:
    image: ghcr.io/linuxserver/heimdall
    container_name: heimdall
    volumes:
      - ./heimdall:/config
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.heimdall.rule=Host(`sim.east.codemonkey.science`) && Host(`sim.east.codemonkey.science`) && PathPrefix(`/`)"
      - "traefik.http.routers.heimdall.priority=1"
      - "traefik.http.routers.heimdall.entrypoints=websecure"
      - "traefik.http.routers.heimdall.tls.certresolver=myresolver"
      - "traefik.http.services.heimdall.loadbalancer.server.port=80"
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - traefik_proxy

  mongodb:
    image: "mongo:5.0"
    volumes:
      - "mongodb_data:/data/db"
    healthcheck:
      test: ["CMD-SHELL", "echo 'db.stats().ok' | mongo localhost:27017/test --quiet"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # For DataNode setup, graylog starts with a preflight UI, this is a change from just using OpenSearch/Elasticsearch.
  # Please take a look at the README at the top of this repo or the regular docs for more info.
  datanode:
    image: "${DATANODE_IMAGE:-graylog/graylog-datanode:5.2}"
    hostname: "datanode"
    environment:
      GRAYLOG_DATANODE_NODE_ID_FILE: "/var/lib/graylog-datanode/node-id"
      GRAYLOG_DATANODE_PASSWORD_SECRET: "${GRAYLOG_PASSWORD_SECRET:?Please configure GRAYLOG_PASSWORD_SECRET in the .env file}"
      GRAYLOG_DATANODE_ROOT_PASSWORD_SHA2: "${GRAYLOG_ROOT_PASSWORD_SHA2:?Please configure GRAYLOG_ROOT_PASSWORD_SHA2 in the .env file}"
      GRAYLOG_DATANODE_MONGODB_URI: "mongodb://mongodb:27017/graylog"
    ulimits:
      memlock:
        hard: -1
        soft: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "8999:8999/tcp"   # DataNode API
      - "9200:9200/tcp"
      - "9300:9300/tcp"
    healthcheck:
      test: ["CMD-SHELL", "ps -C java -o pid= || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    volumes:
      - "graylog-datanode:/var/lib/graylog-datanode"

  graylog:
    hostname: "server"
    image: "${GRAYLOG_IMAGE:-graylog/graylog:5.2}"
    depends_on:
      mongodb:
        condition: "service_started"
    entrypoint: "/usr/bin/tini --  /docker-entrypoint.sh"
    environment:
      GRAYLOG_NODE_ID_FILE: "/usr/share/graylog/data/data/node-id"
      GRAYLOG_PASSWORD_SECRET: "${GRAYLOG_PASSWORD_SECRET:?Please configure GRAYLOG_PASSWORD_SECRET in the .env file}"
      GRAYLOG_ROOT_PASSWORD_SHA2: "${GRAYLOG_ROOT_PASSWORD_SHA2:?Please configure GRAYLOG_ROOT_PASSWORD_SHA2 in the .env file}"
      GRAYLOG_HTTP_BIND_ADDRESS: "0.0.0.0:9000"
      GRAYLOG_HTTP_EXTERNAL_URI: "https://sim.east.codemonkey.science/graylog/"
      GRAYLOG_MONGODB_URI: "mongodb://mongodb:27017/graylog"

      GRAYLOG_TRANSPORT_EMAIL_ENABLED: "true"
      GRAYLOG_TRANSPORT_EMAIL_HOSTNAME: "${GRAYLOG_TRANSPORT_EMAIL_HOSTNAME:?Please configure GRAYLOG_TRANSPORT_EMAIL_HOSTNAME in the .env file}"
      GRAYLOG_TRANSPORT_EMAIL_PORT: "587"
      GRAYLOG_TRANSPORT_EMAIL_USE_AUTH: "true"
      GRAYLOG_TRANSPORT_EMAIL_USE_TLS: "true"
      GRAYLOG_TRANSPORT_EMAIL_USE_SSL: "false"
      GRAYLOG_TRANSPORT_EMAIL_AUTH_USERNAME: "${GRAYLOG_TRANSPORT_EMAIL_AUTH_USERNAME:?Please configure GRAYLOG_TRANSPORT_EMAIL_AUTH_USERNAME in the .env file}"
      GRAYLOG_TRANSPORT_EMAIL_AUTH_PASSWORD: "${GRAYLOG_TRANSPORT_EMAIL_AUTH_PASSWORD:?Please configure GRAYLOG_TRANSPORT_EMAIL_AUTH_PASSWORD in the .env file}"
      GRAYLOG_TRANSPORT_EMAIL_SUBJECT_PREFIX: "[Graylog] "
      GRAYLOG_TRANSPORT_EMAIL_FROM_EMAIL: "graylog@example.com"
    ports:
    - "5044:5044/tcp"   # Beats
    - "514:514/udp"   # Syslog
    - "514:514/tcp"   # Syslog
    - "5555:5555/tcp"   # RAW TCP
    - "5555:5555/udp"   # RAW TCP
    - "12201:12201/tcp" # GELF TCP
    - "12201:12201/udp" # GELF UDP
    #- "10000:10000/tcp" # Custom TCP port
    #- "10000:10000/udp" # Custom UDP port
    - "13301:13301/tcp" # Forwarder data
    - "13302:13302/tcp" # Forwarder config

    - "0.0.0.0:9090:9000/tcp"
    volumes:
      - "graylog_data:/usr/share/graylog/data/data"
      - "graylog_journal:/usr/share/graylog/data/journal"
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail http://localhost:9000/api/" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.graylog.rule=Host(`sim.east.codemonkey.science`) && PathPrefix(`/graylog`)"
      - "traefik.http.routers.graylog.priority=10"
      - "traefik.http.routers.graylog.tls.certresolver=myresolver"
      - "traefik.http.routers.graylog.middlewares=graylog3@docker,graylog2@docker,graylog@docker"
      - "traefik.http.routers.graylog.service=graylog"
      - "traefik.http.middlewares.graylog3.stripprefix.prefixes=/graylog"
      - "traefik.http.middlewares.graylog2.redirectregex.regex=^(.*)/graylog$$"
      - "traefik.http.middlewares.graylog2.redirectregex.replacement=$$1/graylog/"
      - "traefik.http.middlewares.graylog.replacepathregex.regex=^/graylog/(.*)"
      - "traefik.http.middlewares.graylog.replacepathregex.replacement=^/$$1"
      - "traefik.http.services.graylog.loadbalancer.server.port=9000"
      - "traefik.docker.network=traefik_proxy"
    networks:
      - traefik_proxy
      - default
    env_file:
      - .env

  grafana:
    image: grafana/grafana
    environment:
      - "GF_SERVER_ROOT_URL=https://sim.east.codemonkey.science/grafana/"
      - "GF_SERVER_SERVE_FROM_SUB_PATH=true"
      - "GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:?Please configure GF_SECURITY_ADMIN_USER in the .env file}"
      - "GF_SECURITY_ADMIN_PASSWORD={GF_SECURITY_ADMIN_PASSWORD:?Please configure GF_SECURITY_ADMIN_PASSWORD in the .env file}"
      - "GF_USERS_ALLOW_SIGN_UP=false"
    ports:
      - "0.0.0.0:3030:3000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`sim.east.codemonkey.science`) && PathPrefix(`/grafana/`)"
      - "traefik.http.routers.grafana.priority=10"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=myresolver"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.docker.network=traefik_proxy"
      - "traefik.http.routers.grafana.service=grafana"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - default
      - traefik_proxy

  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: unless-stopped
    command: 
      --cleanup --include-restarting --interval 300
      --schedule "0 2 * * *"  # Every day at 2 AM
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./watchtower_logs:/var/log/watchtower
    environment:
      WATCHTOWER_LABEL_ENABLE: "true"
    networks:
      - traefik_proxy
      - default

volumes:
  mongodb_data:
  graylog-datanode:
  graylog_data:
  graylog_journal:

networks:
  traefik_proxy:
    external: true